"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Generated by CoffeeScript 2.7.0
(function () {
  // chars.js - A single-ascii-character utility
  // MIT License
  // Copyright (c) 2014 Dennis Raymondo van der Sluis
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  // The above copyright notice and this permission notice shall be included in all
  // copies or substantial portions of the Software.
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  // SOFTWARE.
  "use strict";

  var Chars, _, mapStringToNumber;

  if (typeof window !== "undefined" && window !== null) {
    _ = window.Types;
  } else if (typeof module !== "undefined" && module !== null) {
    _ = require('types.js');
  }

  mapStringToNumber = function mapStringToNumber(array) {
    var i, index, len, nr, value;

    if (_.notArray(array)) {
      return 0;
    }

    for (index = i = 0, len = array.length; i < len; index = ++i) {
      value = array[index];

      if (_.isNaN(nr = parseInt(array[index], 10))) {
        return index;
      }

      array[index] = nr;
    }

    return array.length;
  };

  _.inRange = function (nr, range) {
    if (_.isNaN(nr = parseInt(nr, 10)) || mapStringToNumber(range) < 2) {
      return false;
    }

    return nr >= range[0] && nr <= range[1];
  };

  _.limit = function (nr, range) {
    if (mapStringToNumber(range) < 2) {
      return 0;
    }

    if (_.isNaN(nr = parseInt(nr, 10)) || nr < range[0]) {
      return range[0];
    }

    if (nr > range[1]) {
      return range[1];
    }

    return nr;
  };

  _.random = function (min, max) {
    if (mapStringToNumber([min, max]) < 2) {
      return 0;
    }

    if (max < min) {
      return min;
    }

    max = max - min + 1;
    return Math.floor(Math.random() * max + min);
  };

  Chars = function () {
    var Chars = /*#__PURE__*/function () {
      _createClass(Chars, null, [{
        key: "ascii",
        value: function ascii(ordinal) {
          return String.fromCharCode(_.forceNumber(ordinal, 0));
        }
      }, {
        key: "ordinal",
        value: function ordinal(_char) {
          return _.forceNumber(_.forceString(_char != null ? _char[0] : void 0).charCodeAt(), 0);
        }
      }, {
        key: "isUpper",
        value: function isUpper(_char2) {
          return _.inRange(Chars.ordinal(_char2), Chars.ASCII_RANGE_UPPERCASE);
        }
      }, {
        key: "isLower",
        value: function isLower(_char3) {
          return _.inRange(Chars.ordinal(_char3), Chars.ASCII_RANGE_LOWERCASE);
        }
      }, {
        key: "isAlpha",
        value: function isAlpha(_char4) {
          return Chars.isUpper(_char4) || Chars.isLower(_char4);
        }
      }, {
        key: "isNumeric",
        value: function isNumeric(_char5) {
          return _.inRange(Chars.ordinal(_char5), Chars.ASCII_RANGE_NUMBERS);
        }
      }, {
        key: "isAlphaNumeric",
        value: function isAlphaNumeric(_char6) {
          return Chars.isAlpha(_char6) || Chars.isNumeric(_char6);
        }
      }, {
        key: "isSpecial",
        value: function isSpecial(_char7) {
          return '' !== (_char7 = _.forceString(_char7)) && !Chars.isAlphaNumeric(_char7);
        }
      }, {
        key: "random",
        value: function random() {
          var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Chars.ASCII_RANGE_ALL;
          var max, min;

          if (_.notArray(range) || range.length < 2) {
            return '';
          }

          min = _.limit(range[0], range);
          max = _.limit(range[1], range);
          return Chars.ascii(_.random(min, max));
        }
      }]);

      function Chars(_char8, range) {
        _classCallCheck(this, Chars);

        this.range = _.forceArray(range, Chars.ASCII_RANGE_ALL);
        this["char"] = this.set(_char8);
      }

      _createClass(Chars, [{
        key: "get",
        value: function get() {
          return this["char"];
        }
      }, {
        key: "set",
        value: function set(_char9) {
          if (_.isNumber(_char9) && _char9 > 9) {
            // handle ordinal argument
            return Chars.ascii(_.limit(_char9, this.range));
          } else {
            return _.forceString(_char9 != null ? _char9[0] : void 0, Chars.ascii(this.range[0]));
          }
        }
      }, {
        key: "next",
        value: function next(amount) {
          return this.set(this.ordinal + _.forceNumber(amount, 1));
        }
      }, {
        key: "prev",
        value: function prev(amount) {
          return this.set(this.ordinal - _.forceNumber(amount, 1));
        }
      }, {
        key: "isUpper",
        value: function isUpper() {
          return Chars.isUpper(this["char"]);
        }
      }, {
        key: "isLower",
        value: function isLower() {
          return Chars.isLower(this["char"]);
        }
      }, {
        key: "isAlpha",
        value: function isAlpha() {
          return Chars.isAlpha(this["char"]);
        }
      }, {
        key: "isNumeric",
        value: function isNumeric() {
          return Chars.isNumeric(this["char"]);
        }
      }, {
        key: "isSpecial",
        value: function isSpecial() {
          return Chars.isSpecial(this["char"]);
        }
      }, {
        key: "isAlphaNumeric",
        value: function isAlphaNumeric() {
          return Chars.isAlphaNumeric(this["char"]);
        }
      }, {
        key: "random",
        value: function random() {
          return this.set(Chars.random());
        }
      }]);

      return Chars;
    }();

    ;
    Chars.ASCII_RANGE_UPPERCASE = [65, 90];
    Chars.ASCII_RANGE_LOWERCASE = [97, 122];
    Chars.ASCII_RANGE_NUMBERS = [48, 57];
    Chars.ASCII_RANGE_SPECIAL_1 = [32, 47];
    Chars.ASCII_RANGE_SPECIAL_2 = [58, 64];
    Chars.ASCII_RANGE_SPECIAL_3 = [91, 96];
    Chars.ASCII_RANGE_SPECIAL_4 = [123, 126];
    Chars.ASCII_RANGE_ALL = [32, 126];
    Chars.REGEXP_SPECIAL_CHARS = ['?', '\\', '[', ']', '(', ')', '*', '+', '.', '/', '|', '^', '$', '<', '>', '-', '&'];
    return Chars;
  }.call(this);

  Object.defineProperty(Chars.prototype, 'ordinal', {
    get: function get() {
      return Chars.ordinal(this["char"]);
    }
  });
  Object.defineProperty(Chars.prototype, 'ascii', {
    get: function get() {
      return this["char"];
    }
  });
  Chars.types = Chars._ = _;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Chars;
  } else if (typeof window !== "undefined" && window !== null) {
    window.Chars = Chars;
  }
}).call(void 0);